//Nós temos algumas palavras e queremos justificá-las à direita, ou seja, alinhar todas elas à direita. Crie um programa que, após ler
// várias palavras, reimprima estas palavras com suas linhas justificadas à direita.
//
//Entrada
//A entrada contém diversos casos de testes. A primeira linha de cada caso de teste conterá um inteiro N (1 ≤ N ≤ 50), que indicará //
//o número de palavras que virão a seguir. Cada uma das N palavras contém no mínimo uma letra e no máximo 50 letras maiúsculas (‘A’-‘Z’). //
O fim da entrada é indicado por N = 0.
//
//Saída
//Para cada caso de teste imprima as palavras inserindo tantos espaços quanto forem necessários à esquerda de cada //
//palavra, para que elas apareçam todas alinhadas à direita e na mesma ordem da entrada. Deixe uma linha em branco entre os casos de teste. 
//Não deixe espaços sobrando no final de cada linha nem imprima espaços desnecessários à esquerda, de //
//modo que pelo menos uma das linhas impressa em cada texto inicie com uma letra.


package Uri1273;

import java.util.Scanner;

public class Main {
	public static void main(String[] args) {

		Scanner in = new Scanner(System.in);

		int b = 2;
		int align = 0;
		int a = in.nextInt();
		String vect[] = new String[a];
		if (a == 0) {

		} else {
			if (a != 0)
				System.out.print('\n');
			for (int i = 0; i < vect.length; i++) {
				vect[i] = in.next();
				int len = vect[i].length();
				if (len > align) {
					align = len; ///// TESTA O TAMANHO DAS STRING/// A VARIAVEL MAIOR SE TORNARÁ O ALIGN
				}
			} //// COMO DAR ESPAÇO EM UMA STRING PARA ALINHAR//////////
		}
		for (int i = 0; i < a; i++) {
			System.out.printf("%" + align + "s\n", vect[i]);/// o numero vira um espaçamento na string.
		}
		in.close();
	}
}
